{"version":3,"sources":["GridComponent.js","App.js","rewardsData.js","reportWebVitals.js","index.js"],"names":["GridComponent","props","useState","setGridApi","setGridColumnApi","onGridReady","params","api","columnApi","className","rowData","rewardsData","field","filter","sortable","totalRewardsArr","App","setRewardsData","seTotalRewardsArr","monthNames","finalArr","useEffect","callPromise","Promise","resolve","reject","metadata","getRewardsData","length","then","data","forEach","user","expenses","expense","amount","month","Date","date","getMonth","rewardPoints","monthNm","push","custName","customerId","totalRewardsLoc","rewardObj","obj","x","hasOwnProperty","totalRewards","getTotalRewardsPoint","catch","error","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mzDAMaA,G,YAAgB,SAACC,GAAW,IAAD,EACRC,mBAAS,MADD,mBACtBC,GADsB,aAEID,mBAAS,MAFb,mBAEhBE,GAFgB,WAItC,SAASC,EAAYC,GACnBH,EAAWG,EAAOC,KAClBH,EAAiBE,EAAOE,WAG1B,OACE,gCACE,sBAAKC,UAAU,aAAf,UACE,8EACA,qBAAKA,UAAU,6BAAf,SACE,eAAC,cAAD,CAAaJ,YAAaA,EAAaK,QAAST,EAAMU,YAAtD,UACE,cAAC,eAAD,CAAcC,MAAM,WAAWC,QAAQ,IACvC,cAAC,eAAD,CAAcD,MAAM,YACpB,cAAC,eAAD,CAAcA,MAAM,SAASE,UAAU,IACvC,cAAC,eAAD,CAAcF,MAAM,eAAeE,UAAU,IAC7C,cAAC,eAAD,CAAcF,MAAM,OAAOE,UAAU,YAI3C,sBAAKL,UAAU,cAAf,UACE,oEACA,qBAAKA,UAAU,8BAAf,SACE,eAAC,cAAD,CACEJ,YAAaA,EACbK,QAAST,EAAMc,gBAFjB,UAIE,cAAC,eAAD,CAAcH,MAAM,WAAWC,QAAQ,IACvC,cAAC,eAAD,CAAcD,MAAM,eAAeE,UAAU,iBCkD1CE,MAnFf,WAAgB,IAAD,EACyBd,mBAAS,IADlC,mBACNS,EADM,KACOM,EADP,OAEgCf,mBAAS,IAFzC,mBAENa,EAFM,KAEWG,EAFX,KA8BPC,EAAa,CACjB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAEIC,EAAW,GA6BjB,OA5BAC,qBAAU,YC/CkB,SAACC,GAAD,OAAiB,IAAIC,SAAQ,SAACC,EAASC,GAC9DH,EACCE,EAAQE,GAGRD,EAAO,eD6CXE,CADsC,IAApBP,EAASQ,QAExBC,MAAK,SAACC,GACLA,EAAKC,SAAQ,SAACC,IACXA,EAAKC,UAAY,IAAIF,SAAQ,SAACG,GAC7B,IAjDeC,EAiDTC,EAAQ,IAAIC,KAAKH,EAAQI,MAAMC,WAC/BC,GAlDSL,EAkDsBD,EAAQC,QAjDxC,IACJ,GAAsB,GAAhBA,EAAS,KAEpBA,EAAS,GACJA,EAAS,GAEX,EA4CKM,EAAUtB,EAAWiB,GACzBhB,EAASsB,KAAK,CACZC,SAAUX,EAAKW,SACfF,QAASA,EACTD,aAAcA,EACdF,KAAMJ,EAAQI,KACdM,WAAYZ,EAAKY,WACjBT,OAAQD,EAAQC,eAhDC,SAACf,GAC5B,IAAIyB,EAAkB,GAClBC,EAAY,GAQhB,IAAK,IAAIC,KAPT3B,EAASW,SAAQ,SAACiB,GACZF,EAAUG,eAAeD,EAAEL,UAC7BG,EAAUE,EAAEL,UAAYG,EAAUE,EAAEL,UAAYK,EAAER,aAElDM,EAAUE,EAAEL,UAAYK,EAAER,gBAGdM,EACdD,EAAgBH,KAAK,CAAEC,SAAUI,EAAKG,aAAcJ,EAAUC,KAEhE7B,EAAkB2B,GAwCdM,CAAqB/B,GACrBH,EAAeG,MAEhBgC,OAAM,SAACC,GACNC,QAAQC,IAAIF,QAEf,IAED,mCACE,cAAC,EAAD,CACE1C,YAAaA,EACbI,gBAAiBA,OErEVyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.33840150.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { AgGridColumn, AgGridReact } from \"ag-grid-react\";\n\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\n\nexport const GridComponent = (props) => {\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n\n  function onGridReady(params) {\n    setGridApi(params.api);\n    setGridColumnApi(params.columnApi);\n  }\n\n  return (\n    <div>\n      <div className=\"first-grid\">\n        <h4>Data Breakup For Each Transaction(Monthwise)</h4>\n        <div className=\"ag-theme-alpine first-grid\">\n          <AgGridReact onGridReady={onGridReady} rowData={props.rewardsData}>\n            <AgGridColumn field=\"custName\" filter={true}></AgGridColumn>\n            <AgGridColumn field=\"monthNm\"></AgGridColumn>\n            <AgGridColumn field=\"amount\" sortable={true}></AgGridColumn>\n            <AgGridColumn field=\"rewardPoints\" sortable={true}></AgGridColumn>\n            <AgGridColumn field=\"date\" sortable={true}></AgGridColumn>\n          </AgGridReact>\n        </div>\n      </div>\n      <div className=\"second-grid\">\n        <h4>Total Reward Points for All Months</h4>\n        <div className=\"ag-theme-alpine second-grid\">\n          <AgGridReact\n            onGridReady={onGridReady}\n            rowData={props.totalRewardsArr}\n          >\n            <AgGridColumn field=\"custName\" filter={true}></AgGridColumn>\n            <AgGridColumn field=\"totalRewards\" sortable={true}></AgGridColumn>\n          </AgGridReact>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import \"./App.css\";\nimport { getRewardsData } from \"./rewardsData\";\nimport { useEffect, useState } from \"react\";\nimport { GridComponent } from \"./GridComponent\";\nfunction App() {\n  const [rewardsData, setRewardsData] = useState([]);\n  const [totalRewardsArr, seTotalRewardsArr] = useState([]);\n  const getRewardPoints = (amount) => {\n    if (amount > 100) {\n      return 50 + (amount - 100) * 2;\n    }\n    if (amount > 50) {\n      return amount - 50;\n    }\n    return 0;\n  };\n\n  const getTotalRewardsPoint = (finalArr) => {\n    var totalRewardsLoc = [];\n    var rewardObj = {};\n    finalArr.forEach((x) => {\n      if (rewardObj.hasOwnProperty(x.custName)) {\n        rewardObj[x.custName] = rewardObj[x.custName] + x.rewardPoints;\n      } else {\n        rewardObj[x.custName] = x.rewardPoints;\n      }\n    });\n    for (var obj in rewardObj) {\n      totalRewardsLoc.push({ custName: obj, totalRewards: rewardObj[obj] });\n    }\n    seTotalRewardsArr(totalRewardsLoc);\n    return totalRewardsLoc;\n  };\n\n  const monthNames = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n  const finalArr = [];\n  useEffect(() => {\n    //A dummy check to return dataset\n    let callPromise = finalArr.length === 0 ? true : false;\n    getRewardsData(callPromise)\n      .then((data) => {\n        data.forEach((user) => {\n          (user.expenses || []).forEach((expense) => {\n            const month = new Date(expense.date).getMonth();\n            const rewardPoints = getRewardPoints(expense.amount);\n            var monthNm = monthNames[month];\n            finalArr.push({\n              custName: user.custName,\n              monthNm: monthNm,\n              rewardPoints: rewardPoints,\n              date: expense.date,\n              customerId: user.customerId,\n              amount: expense.amount\n            });\n          });\n        });\n        //getting the manipulated dataset with monthwise and yearwise calculation\n        getTotalRewardsPoint(finalArr);\n        setRewardsData(finalArr);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n  return (\n    <>\n      <GridComponent\n        rewardsData={rewardsData}\n        totalRewardsArr={totalRewardsArr}\n      />\n    </>\n  );\n}\n\nexport default App;\n","\nimport metadata from './rewardsMetadata.json'\nexport const getRewardsData = (callPromise) => new Promise((resolve, reject) =>{\n    if(callPromise){\n        resolve(metadata)\n    }\n    else{\n        reject('failure')\n    }\n})","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}